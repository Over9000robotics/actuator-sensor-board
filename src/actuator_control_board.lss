
actuator_control_board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000005b6  0000064a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  0000064c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e32  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  000015d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048b  00000000  00000000  00001d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000021f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e0  00000000  00000000  00002424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063e  00000000  00000000  00002804  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002e42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4a 00 	jmp	0x94	; 0x94 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  7c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  80:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  84:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  88:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  8c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  90:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000094 <__ctors_end>:
  94:	11 24       	eor	r1, r1
  96:	1f be       	out	0x3f, r1	; 63
  98:	cf ef       	ldi	r28, 0xFF	; 255
  9a:	d0 e1       	ldi	r29, 0x10	; 16
  9c:	de bf       	out	0x3e, r29	; 62
  9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
  a0:	11 e0       	ldi	r17, 0x01	; 1
  a2:	a0 e0       	ldi	r26, 0x00	; 0
  a4:	b1 e0       	ldi	r27, 0x01	; 1
  a6:	e6 eb       	ldi	r30, 0xB6	; 182
  a8:	f5 e0       	ldi	r31, 0x05	; 5
  aa:	00 e0       	ldi	r16, 0x00	; 0
  ac:	0b bf       	out	0x3b, r16	; 59
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
  b0:	07 90       	elpm	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	a2 30       	cpi	r26, 0x02	; 2
  b6:	b1 07       	cpc	r27, r17
  b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	a2 e0       	ldi	r26, 0x02	; 2
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
  c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
  c4:	a2 31       	cpi	r26, 0x12	; 18
  c6:	b2 07       	cpc	r27, r18
  c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
  ca:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
  ce:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <USART0_init>:

void USART0_init(uint32_t baud)
{
	uint32_t temp_baud = 0;

	temp_baud = (CLOCK_FQ / (8 * baud)) - 1;
  d6:	9b 01       	movw	r18, r22
  d8:	ac 01       	movw	r20, r24
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	44 1f       	adc	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	8a 95       	dec	r24
  e6:	d1 f7       	brne	.-12     	; 0xdc <USART0_init+0x6>
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	74 e2       	ldi	r23, 0x24	; 36
  ec:	84 ef       	ldi	r24, 0xF4	; 244
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
  f4:	ba 01       	movw	r22, r20
  f6:	a9 01       	movw	r20, r18
  f8:	41 50       	subi	r20, 0x01	; 1
  fa:	51 09       	sbc	r21, r1
  fc:	61 09       	sbc	r22, r1
  fe:	71 09       	sbc	r23, r1
	
	//Set baud rate
	UBRR0H = (unsigned char) (temp_baud >> 8);
 100:	bb 27       	eor	r27, r27
 102:	a7 2f       	mov	r26, r23
 104:	96 2f       	mov	r25, r22
 106:	85 2f       	mov	r24, r21
 108:	80 93 c5 00 	sts	0x00C5, r24
	UBRR0L = (unsigned char) temp_baud;
 10c:	40 93 c4 00 	sts	0x00C4, r20

	UCSR0A |= (1 << U2X0);
 110:	e0 ec       	ldi	r30, 0xC0	; 192
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	82 60       	ori	r24, 0x02	; 2
 118:	80 83       	st	Z, r24

	UCSR0B |= (1 << RXEN0);	// Enable RX
 11a:	e1 ec       	ldi	r30, 0xC1	; 193
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	80 61       	ori	r24, 0x10	; 16
 122:	80 83       	st	Z, r24
	
	DDRE |= (1 << PE1);			// Set TX as output
 124:	69 9a       	sbi	0x0d, 1	; 13
	DDRE &= ~(1 << PE0);		// Set RX as input
 126:	68 98       	cbi	0x0d, 0	; 13
	
	UCSR0B |= (1 << TXEN0);		//Enable TX
 128:	80 81       	ld	r24, Z
 12a:	88 60       	ori	r24, 0x08	; 8
 12c:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02);	//Data size
 12e:	80 81       	ld	r24, Z
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	80 83       	st	Z, r24
	
	// async, no parity, 1 stop bit, 8 bit data size	
	UCSR0C &= ~(1 << 7);
 134:	e2 ec       	ldi	r30, 0xC2	; 194
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	8f 77       	andi	r24, 0x7F	; 127
 13c:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL0);
 13e:	80 81       	ld	r24, Z
 140:	8f 7b       	andi	r24, 0xBF	; 191
 142:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01) ;
 144:	80 81       	ld	r24, Z
 146:	8f 7d       	andi	r24, 0xDF	; 223
 148:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM00);
 14a:	80 81       	ld	r24, Z
 14c:	8f 7e       	andi	r24, 0xEF	; 239
 14e:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
 150:	80 81       	ld	r24, Z
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << USBS0);
 156:	80 81       	ld	r24, Z
 158:	87 7f       	andi	r24, 0xF7	; 247
 15a:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);
 15c:	80 81       	ld	r24, Z
 15e:	84 60       	ori	r24, 0x04	; 4
 160:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ00);
 162:	80 81       	ld	r24, Z
 164:	82 60       	ori	r24, 0x02	; 2
 166:	80 83       	st	Z, r24
 168:	08 95       	ret

0000016a <USART0_transmit>:

}

void USART0_transmit(unsigned char data)
{
	while ( ! ( UCSR0A & (1<<UDRE0))); //Wait for empty transmit buffer
 16a:	90 91 c0 00 	lds	r25, 0x00C0
 16e:	95 ff       	sbrs	r25, 5
 170:	fc cf       	rjmp	.-8      	; 0x16a <USART0_transmit>

	UDR0 = data; //Put data into buffer, sends the data
 172:	80 93 c6 00 	sts	0x00C6, r24
 176:	08 95       	ret

00000178 <USART0_receive>:
}

unsigned char USART0_receive(void)
{
	while ( ! (UCSR0A & (1<<RXC0)));
 178:	80 91 c0 00 	lds	r24, 0x00C0
 17c:	87 ff       	sbrs	r24, 7
 17e:	fc cf       	rjmp	.-8      	; 0x178 <USART0_receive>

	return UDR0;
 180:	80 91 c6 00 	lds	r24, 0x00C6
}
 184:	08 95       	ret

00000186 <sensors_init>:
//Memristor board
// P1 -> PA0
// P2 -> PA1
void sensors_init(void)
{
	DDRA |= (0 << PA7); //sens1 -> P1
 186:	81 b1       	in	r24, 0x01	; 1
 188:	81 b9       	out	0x01, r24	; 1
	DDRA |= (0 << PA6); //sens2 -> P2
 18a:	81 b1       	in	r24, 0x01	; 1
 18c:	81 b9       	out	0x01, r24	; 1

	sensors[0].pin = 7; //try with PA7
 18e:	e6 e0       	ldi	r30, 0x06	; 6
 190:	f1 e0       	ldi	r31, 0x01	; 1
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	81 83       	std	Z+1, r24	; 0x01
	sensors[1].pin = 6;
 196:	86 e0       	ldi	r24, 0x06	; 6
 198:	83 83       	std	Z+3, r24	; 0x03

	sensors[0].value = 0;
 19a:	10 82       	st	Z, r1
	sensors[1].value = 0;
 19c:	12 82       	std	Z+2, r1	; 0x02
 19e:	08 95       	ret

000001a0 <send_sensor_status>:
		send_sensor_status();
	}
}

void send_sensor_status(void)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29

	transmit_byte(0xFE);
 1a4:	8e ef       	ldi	r24, 0xFE	; 254
 1a6:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>

	int i;
	for(i=0; i<NUM_OF_SENS; i++)
	{
		transmit_byte(sensors[i].value);
 1aa:	c6 e0       	ldi	r28, 0x06	; 6
 1ac:	d1 e0       	ldi	r29, 0x01	; 1
 1ae:	88 81       	ld	r24, Y
 1b0:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	0e 94 28 01 	call	0x250	; 0x250 <transmit_byte>
	}

	transmit_byte(0xFC);
 1ba:	8c ef       	ldi	r24, 0xFC	; 252
}
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
	for(i=0; i<NUM_OF_SENS; i++)
	{
		transmit_byte(sensors[i].value);
	}

	transmit_byte(0xFC);
 1c0:	0c 94 28 01 	jmp	0x250	; 0x250 <transmit_byte>

000001c4 <update_sensor_status>:
	sensors[1].value = 0;
}

void update_sensor_status(void)
{
	temp[0].value = PINA & (1 << sensors[0].pin);
 1c4:	40 b1       	in	r20, 0x00	; 0
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	9c 01       	movw	r18, r24
 1cc:	00 90 07 01 	lds	r0, 0x0107
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <update_sensor_status+0x12>
 1d2:	22 0f       	add	r18, r18
 1d4:	33 1f       	adc	r19, r19
 1d6:	0a 94       	dec	r0
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <update_sensor_status+0xe>
 1da:	24 23       	and	r18, r20
 1dc:	20 93 02 01 	sts	0x0102, r18
	temp[1].value = PINA & (1 << sensors[1].pin);
 1e0:	30 b1       	in	r19, 0x00	; 0
 1e2:	00 90 09 01 	lds	r0, 0x0109
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <update_sensor_status+0x28>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <update_sensor_status+0x24>
 1f0:	83 23       	and	r24, r19

	if(temp[0].value > 0)
 1f2:	22 23       	and	r18, r18
 1f4:	21 f0       	breq	.+8      	; 0x1fe <update_sensor_status+0x3a>
		temp[0].value = 0xFF;
 1f6:	9f ef       	ldi	r25, 0xFF	; 255
 1f8:	90 93 02 01 	sts	0x0102, r25
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <update_sensor_status+0x3e>
	else
		temp[0].value = 0;
 1fe:	10 92 02 01 	sts	0x0102, r1

	if(temp[1].value > 0)
 202:	88 23       	and	r24, r24
 204:	09 f1       	breq	.+66     	; 0x248 <update_sensor_status+0x84>
		temp[1].value = 0xFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	80 93 04 01 	sts	0x0104, r24
		temp[1].value = 0;

	int i;
	for(i = 0; i < NUM_OF_SENS; i++)
	{
		if(temp[i].value != sensors[i].value)
 20c:	80 91 02 01 	lds	r24, 0x0102
 210:	90 91 06 01 	lds	r25, 0x0106
 214:	89 17       	cp	r24, r25
 216:	19 f0       	breq	.+6      	; 0x21e <update_sensor_status+0x5a>
		{
			state_changed_flag = 1;
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	90 93 00 01 	sts	0x0100, r25
		}
		sensors[i].value = temp[i].value;
 21e:	80 93 06 01 	sts	0x0106, r24
		temp[1].value = 0;

	int i;
	for(i = 0; i < NUM_OF_SENS; i++)
	{
		if(temp[i].value != sensors[i].value)
 222:	80 91 04 01 	lds	r24, 0x0104
 226:	90 91 08 01 	lds	r25, 0x0108
 22a:	89 17       	cp	r24, r25
 22c:	19 f0       	breq	.+6      	; 0x234 <update_sensor_status+0x70>
		{
			state_changed_flag = 1;
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	90 93 00 01 	sts	0x0100, r25
		}
		sensors[i].value = temp[i].value;
 234:	80 93 08 01 	sts	0x0108, r24
	}

	if(state_changed_flag)
 238:	80 91 00 01 	lds	r24, 0x0100
 23c:	88 23       	and	r24, r24
 23e:	39 f0       	breq	.+14     	; 0x24e <update_sensor_status+0x8a>
	{
		state_changed_flag = 0;
 240:	10 92 00 01 	sts	0x0100, r1
		send_sensor_status();
 244:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <send_sensor_status>
		temp[0].value = 0;

	if(temp[1].value > 0)
		temp[1].value = 0xFF;
	else
		temp[1].value = 0;
 248:	10 92 04 01 	sts	0x0104, r1
 24c:	df cf       	rjmp	.-66     	; 0x20c <update_sensor_status+0x48>
 24e:	08 95       	ret

00000250 <transmit_byte>:

void transmit_byte(uint8_t byte)
{
	if(selected_protocol == UART)
	{
		USART0_transmit(byte);
 250:	0c 94 b5 00 	jmp	0x16a	; 0x16a <USART0_transmit>

00000254 <read_byte>:
{
	uint8_t byte;
	
	if(selected_protocol == UART)
	{
		byte = USART0_receive();
 254:	0c 94 bc 00 	jmp	0x178	; 0x178 <USART0_receive>

00000258 <read_packet>:
	
	return byte;
}

void read_packet(void)
{
 258:	cf 93       	push	r28
{
	uint8_t byte;
	
	if(selected_protocol == UART)
	{
		byte = USART0_receive();
 25a:	0e 94 bc 00 	call	0x178	; 0x178 <USART0_receive>

void read_packet(void)
{
	uint8_t incoming_byte = read_byte();

	switch(incoming_byte)
 25e:	82 34       	cpi	r24, 0x42	; 66
 260:	89 f0       	breq	.+34     	; 0x284 <read_packet+0x2c>
 262:	83 35       	cpi	r24, 0x53	; 83
 264:	61 f0       	breq	.+24     	; 0x27e <read_packet+0x26>
 266:	81 34       	cpi	r24, 0x41	; 65
 268:	b9 f4       	brne	.+46     	; 0x298 <read_packet+0x40>
{
	uint8_t byte;
	
	if(selected_protocol == UART)
	{
		byte = USART0_receive();
 26a:	0e 94 bc 00 	call	0x178	; 0x178 <USART0_receive>
 26e:	c8 2f       	mov	r28, r24
 270:	0e 94 bc 00 	call	0x178	; 0x178 <USART0_receive>
			uint8_t servo_num = 0;
			
			servo_num = read_byte();
			angle = read_byte();
			
			servo_set_position(servo_num, angle);
 274:	68 2f       	mov	r22, r24
 276:	8c 2f       	mov	r24, r28
		{
			
			break;
		}
	}
}
 278:	cf 91       	pop	r28
			uint8_t servo_num = 0;
			
			servo_num = read_byte();
			angle = read_byte();
			
			servo_set_position(servo_num, angle);
 27a:	0c 94 44 02 	jmp	0x488	; 0x488 <servo_set_position>
		{
			
			break;
		}
	}
}
 27e:	cf 91       	pop	r28

	switch(incoming_byte)
	{
		case SENSOR_ASK:
		{
			send_sensor_status();
 280:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <send_sensor_status>
{
	uint8_t byte;
	
	if(selected_protocol == UART)
	{
		byte = USART0_receive();
 284:	0e 94 bc 00 	call	0x178	; 0x178 <USART0_receive>
 288:	c8 2f       	mov	r28, r24
 28a:	0e 94 bc 00 	call	0x178	; 0x178 <USART0_receive>
			uint8_t brushless_num = 0;
			
			brushless_num = read_byte();
			speed = read_byte();
			
			brushless_set_speed(brushless_num, speed);
 28e:	68 2f       	mov	r22, r24
 290:	8c 2f       	mov	r24, r28
		{
			
			break;
		}
	}
}
 292:	cf 91       	pop	r28
			uint8_t brushless_num = 0;
			
			brushless_num = read_byte();
			speed = read_byte();
			
			brushless_set_speed(brushless_num, speed);
 294:	0c 94 32 02 	jmp	0x464	; 0x464 <brushless_set_speed>
		{
			
			break;
		}
	}
}
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <SPI_slave_init>:
 * No interrupt
 */

void SPI_slave_init(void)
{
	DDRB |= (1<<PB3); // Set MISO output, all others input
 29c:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); // Enable SPI 
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	8c bd       	out	0x2c, r24	; 44
	
	SPCR |= (1 << SPR1); //fclk / 32
 2a2:	8c b5       	in	r24, 0x2c	; 44
 2a4:	82 60       	ori	r24, 0x02	; 2
 2a6:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1 << SPI2X);
 2a8:	8d b5       	in	r24, 0x2d	; 45
 2aa:	81 60       	ori	r24, 0x01	; 1
 2ac:	8d bd       	out	0x2d, r24	; 45
 2ae:	08 95       	ret

000002b0 <SPI_receive>:
}

char SPI_receive(void)
{
	while(!(SPSR & (1<<SPIF))); // Wait for reception complete 
 2b0:	0d b4       	in	r0, 0x2d	; 45
 2b2:	07 fe       	sbrs	r0, 7
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <SPI_receive>
	
	return SPDR;
 2b6:	8e b5       	in	r24, 0x2e	; 46
}
 2b8:	08 95       	ret

000002ba <SPI_transmit>:

void SPI_transmit(char byte)
{
	SPDR = byte; // Start transmission
 2ba:	8e bd       	out	0x2e, r24	; 46

	while(!(SPSR & (1<<SPIF)));
 2bc:	0d b4       	in	r0, 0x2d	; 45
 2be:	07 fe       	sbrs	r0, 7
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <SPI_transmit+0x2>
}
 2c2:	08 95       	ret

000002c4 <pbr_pwm_set>:
*/
void pbr_pwm_set(uint8_t brushless_num, uint8_t procent)
{
	uint32_t pwm_val = 0;

	if(procent > 100 || procent < 0)
 2c4:	65 36       	cpi	r22, 0x65	; 101
 2c6:	88 f4       	brcc	.+34     	; 0x2ea <pbr_pwm_set+0x26>
		return;

	//pwm_val = (int) ((icr3_temp * procent) / 100); //test -> pwm can be from 0 to max

	pwm_val = 1000 + procent * (1000 / 100);
 2c8:	9a e0       	ldi	r25, 0x0A	; 10
 2ca:	69 9f       	mul	r22, r25
 2cc:	b0 01       	movw	r22, r0
 2ce:	11 24       	eor	r1, r1
 2d0:	68 51       	subi	r22, 0x18	; 24
 2d2:	7c 4f       	sbci	r23, 0xFC	; 252

	if(brushless_num == BR_HEAD)
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	19 f4       	brne	.+6      	; 0x2de <pbr_pwm_set+0x1a>
	{
		register_16_write(head_brushless, pwm_val);
 2d8:	8c e9       	ldi	r24, 0x9C	; 156
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	04 c0       	rjmp	.+8      	; 0x2e6 <pbr_pwm_set+0x22>
	}

	else if(brushless_num == BR_SECONDARY)
 2de:	82 30       	cpi	r24, 0x02	; 2
 2e0:	21 f4       	brne	.+8      	; 0x2ea <pbr_pwm_set+0x26>
	{
		register_16_write(second_brushless, pwm_val);
 2e2:	8a e9       	ldi	r24, 0x9A	; 154
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <register_16_write>
 2ea:	08 95       	ret

000002ec <servo_pwm_set>:

	//	16-bit pwm timers
	// 500  -> 0.5 ms -> position LEFT
	// 1500 -> 1.5 ms -> position RIGHT
	
	if(servo_num == SERVO1)
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	a9 f4       	brne	.+42     	; 0x31a <servo_pwm_set+0x2e>
	{
		pwm_val = SERVO_OCR_MIN + ((uint32_t) degrees * (SERVO_OCR_MAX-SERVO_OCR_MIN)) / 180;
 2f0:	26 2f       	mov	r18, r22
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	a0 ed       	ldi	r26, 0xD0	; 208
 2f6:	b7 e0       	ldi	r27, 0x07	; 7
 2f8:	0e 94 ca 02 	call	0x594	; 0x594 <__umulhisi3>
 2fc:	24 eb       	ldi	r18, 0xB4	; 180
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
 308:	ca 01       	movw	r24, r20
 30a:	b9 01       	movw	r22, r18
 30c:	6c 50       	subi	r22, 0x0C	; 12
 30e:	7e 4f       	sbci	r23, 0xFE	; 254
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
		register_16_write(servo1, pwm_val);
 314:	88 e8       	ldi	r24, 0x88	; 136
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	2d c0       	rjmp	.+90     	; 0x374 <servo_pwm_set+0x88>
	}
	
	else if(servo_num == SERVO2)
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	a9 f4       	brne	.+42     	; 0x348 <servo_pwm_set+0x5c>
	{
		pwm_val = SERVO_OCR_MIN + ((uint32_t) degrees * (SERVO_OCR_MAX-SERVO_OCR_MIN)) / 180;
 31e:	26 2f       	mov	r18, r22
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	a0 ed       	ldi	r26, 0xD0	; 208
 324:	b7 e0       	ldi	r27, 0x07	; 7
 326:	0e 94 ca 02 	call	0x594	; 0x594 <__umulhisi3>
 32a:	24 eb       	ldi	r18, 0xB4	; 180
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e0       	ldi	r20, 0x00	; 0
 330:	50 e0       	ldi	r21, 0x00	; 0
 332:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
 336:	ca 01       	movw	r24, r20
 338:	b9 01       	movw	r22, r18
 33a:	6c 50       	subi	r22, 0x0C	; 12
 33c:	7e 4f       	sbci	r23, 0xFE	; 254
 33e:	8f 4f       	sbci	r24, 0xFF	; 255
 340:	9f 4f       	sbci	r25, 0xFF	; 255
		register_16_write(servo2, pwm_val);
 342:	8a e8       	ldi	r24, 0x8A	; 138
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	16 c0       	rjmp	.+44     	; 0x374 <servo_pwm_set+0x88>
	}
	
	else if(servo_num == SERVO3)
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	b1 f4       	brne	.+44     	; 0x378 <servo_pwm_set+0x8c>
	{
		pwm_val = SERVO_OCR_MIN + ((uint32_t) degrees * (SERVO_OCR_MAX-SERVO_OCR_MIN)) / 180;
 34c:	26 2f       	mov	r18, r22
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	a0 ed       	ldi	r26, 0xD0	; 208
 352:	b7 e0       	ldi	r27, 0x07	; 7
 354:	0e 94 ca 02 	call	0x594	; 0x594 <__umulhisi3>
 358:	24 eb       	ldi	r18, 0xB4	; 180
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	40 e0       	ldi	r20, 0x00	; 0
 35e:	50 e0       	ldi	r21, 0x00	; 0
 360:	0e 94 a8 02 	call	0x550	; 0x550 <__udivmodsi4>
 364:	ca 01       	movw	r24, r20
 366:	b9 01       	movw	r22, r18
 368:	6c 50       	subi	r22, 0x0C	; 12
 36a:	7e 4f       	sbci	r23, 0xFE	; 254
 36c:	8f 4f       	sbci	r24, 0xFF	; 255
 36e:	9f 4f       	sbci	r25, 0xFF	; 255
		register_16_write(servo3, pwm_val);
 370:	8c e8       	ldi	r24, 0x8C	; 140
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <register_16_write>
 378:	08 95       	ret

0000037a <timer1_init>:
 * Initialisation for 16-bit Timer1
 */
void timer1_init(void)
{
	//Phase correct mode
	icr1_temp = CLOCK_FQ / (2 * PRESCALER_VAL * SERVO_PWM_FREQ);
 37a:	80 e2       	ldi	r24, 0x20	; 32
 37c:	9e e4       	ldi	r25, 0x4E	; 78
 37e:	a0 e0       	ldi	r26, 0x00	; 0
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	80 93 0a 01 	sts	0x010A, r24
 386:	90 93 0b 01 	sts	0x010B, r25
 38a:	a0 93 0c 01 	sts	0x010C, r26
 38e:	b0 93 0d 01 	sts	0x010D, r27

	TCCR1A |= (1 << WGM11);
 392:	e0 e8       	ldi	r30, 0x80	; 128
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	82 60       	ori	r24, 0x02	; 2
 39a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13);
 39c:	e1 e8       	ldi	r30, 0x81	; 129
 39e:	f0 e0       	ldi	r31, 0x00	; 0
 3a0:	80 81       	ld	r24, Z
 3a2:	80 61       	ori	r24, 0x10	; 16
 3a4:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11); //prescaler = 8
 3a6:	80 81       	ld	r24, Z
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	80 83       	st	Z, r24

	register_16_write(&ICR1, icr1_temp);
 3ac:	60 91 0a 01 	lds	r22, 0x010A
 3b0:	70 91 0b 01 	lds	r23, 0x010B
 3b4:	86 e8       	ldi	r24, 0x86	; 134
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <register_16_write>

000003bc <timer3_init>:
 * Initialisation for 16-bit Timer3
 */
void timer3_init(void)
{
	//Phase correct mode, timer 3
	icr3_temp = CLOCK_FQ / (2 * PRESCALER_VAL * BRUSHLESS_PWM_FREQ);
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	9e e4       	ldi	r25, 0x4E	; 78
 3c0:	a0 e0       	ldi	r26, 0x00	; 0
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	80 93 0e 01 	sts	0x010E, r24
 3c8:	90 93 0f 01 	sts	0x010F, r25
 3cc:	a0 93 10 01 	sts	0x0110, r26
 3d0:	b0 93 11 01 	sts	0x0111, r27

	TCCR3A |= (1 << WGM31);
 3d4:	e0 e9       	ldi	r30, 0x90	; 144
 3d6:	f0 e0       	ldi	r31, 0x00	; 0
 3d8:	80 81       	ld	r24, Z
 3da:	82 60       	ori	r24, 0x02	; 2
 3dc:	80 83       	st	Z, r24
	TCCR3B |= (1 << WGM33);
 3de:	e1 e9       	ldi	r30, 0x91	; 145
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	80 83       	st	Z, r24
	TCCR3B |= (1 << CS31); //prescaler = 8
 3e8:	80 81       	ld	r24, Z
 3ea:	82 60       	ori	r24, 0x02	; 2
 3ec:	80 83       	st	Z, r24

	register_16_write(&ICR3, icr3_temp);
 3ee:	60 91 0e 01 	lds	r22, 0x010E
 3f2:	70 91 0f 01 	lds	r23, 0x010F
 3f6:	86 e9       	ldi	r24, 0x96	; 150
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <register_16_write>

000003fe <pwm_init>:
 * FOC2A  WGM20  COM2A1  COM2A0  WGM21  CS22  CS21  CS20
 *  0		1		1		0	   1	  1		0	 0
 *
 **********************************************************/
	//fastpwm on OC2A pin
	DDRB |= (1 << PB4);
 3fe:	24 9a       	sbi	0x04, 4	; 4

	TCCR2A = 0x6C;
 400:	8c e6       	ldi	r24, 0x6C	; 108
 402:	80 93 b0 00 	sts	0x00B0, r24
	OCR2A = 0;
 406:	10 92 b3 00 	sts	0x00B3, r1
/******************************************************************/

/***************OC1A***********************************************/
	//fast pwm on OC1A pin (PB2 - PWM2)
	DDRB |= (1 << PB5); //enable pin as output
 40a:	25 9a       	sbi	0x04, 5	; 4
	OCR1AH = 0;
 40c:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 0;
 410:	10 92 88 00 	sts	0x0088, r1

//	TCCR1A |= (1 << COM1A1); //clear on compare match when up counting
//	TCCR1A &= ~(1 << COM1A0);
	TCCR1A |= (1 << COM1A1);
 414:	e0 e8       	ldi	r30, 0x80	; 128
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 68       	ori	r24, 0x80	; 128
 41c:	80 83       	st	Z, r24

/*********************************************************************/
/************** OC1B **************************************************/
	DDRB |= (1 << PB6);
 41e:	26 9a       	sbi	0x04, 6	; 4
	OCR1BH = 0;
 420:	10 92 8b 00 	sts	0x008B, r1
	OCR1BL = 0;
 424:	10 92 8a 00 	sts	0x008A, r1

	TCCR1A |= (1 << COM1B1);
 428:	80 81       	ld	r24, Z
 42a:	80 62       	ori	r24, 0x20	; 32
 42c:	80 83       	st	Z, r24
//	TCCR1A |= (1 << COM1B1);
//	TCCR1A &= ~(1 << COM1B0);

/*********************************************************************/
/************* OC1C **************************************************/
	DDRB |= (1 << PB7);
 42e:	27 9a       	sbi	0x04, 7	; 4
	OCR1CH = 0;
 430:	10 92 8d 00 	sts	0x008D, r1
	OCR1CL = 0;
 434:	10 92 8c 00 	sts	0x008C, r1

	TCCR1A |= (1 << COM1C1);
 438:	80 81       	ld	r24, Z
 43a:	88 60       	ori	r24, 0x08	; 8
 43c:	80 83       	st	Z, r24

/*********************************************************************/

/*********OC3C - PBR1*************************************************/
//OC3C
	DDRE |= (1 << PE5);
 43e:	6d 9a       	sbi	0x0d, 5	; 13
	TCCR3A |= (1 << COM3C1);
 440:	e0 e9       	ldi	r30, 0x90	; 144
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	88 60       	ori	r24, 0x08	; 8
 448:	80 83       	st	Z, r24

	OCR3CH = 0;
 44a:	10 92 9d 00 	sts	0x009D, r1
	OCR3CL = 0;
 44e:	10 92 9c 00 	sts	0x009C, r1
/********OC3B - PBR2**************************************************/
	DDRE |= (1 << PE4);
 452:	6c 9a       	sbi	0x0d, 4	; 13
	TCCR3A |= (1 << COM3B1);
 454:	80 81       	ld	r24, Z
 456:	80 62       	ori	r24, 0x20	; 32
 458:	80 83       	st	Z, r24

	OCR3BH = 0;
 45a:	10 92 9b 00 	sts	0x009B, r1
	OCR3BL = 0;
 45e:	10 92 9a 00 	sts	0x009A, r1
 462:	08 95       	ret

00000464 <brushless_set_speed>:
#include "actuator.h"

void brushless_set_speed(uint8_t brushless_num, uint8_t procent)
{
	
	if(brushless_num > 2 || brushless_num < 0)
 464:	83 30       	cpi	r24, 0x03	; 3
 466:	20 f4       	brcc	.+8      	; 0x470 <brushless_set_speed+0xc>
		return;
	
	if(procent > 100 || procent < 0)
 468:	65 36       	cpi	r22, 0x65	; 101
 46a:	10 f4       	brcc	.+4      	; 0x470 <brushless_set_speed+0xc>
		return;
	
	pbr_pwm_set(brushless_num, procent);
 46c:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <pbr_pwm_set>
 470:	08 95       	ret

00000472 <servo_limit_check>:

uint8_t servo_limit_check(int8_t servo_num, int8_t degrees)
{
	uint8_t correctness = 0;
	
	if(servo_num == SERVO1)
 472:	81 50       	subi	r24, 0x01	; 1
 474:	84 30       	cpi	r24, 0x04	; 4
 476:	30 f4       	brcc	.+12     	; 0x484 <servo_limit_check+0x12>
	{
		if(degrees > SERVO1_MAX || degrees < SERVO1_MIN)
 478:	86 2f       	mov	r24, r22
 47a:	80 95       	com	r24
 47c:	88 1f       	adc	r24, r24
 47e:	88 27       	eor	r24, r24
 480:	88 1f       	adc	r24, r24
 482:	08 95       	ret
	servo_pwm_set(servo_num, degrees);
}

uint8_t servo_limit_check(int8_t servo_num, int8_t degrees)
{
	uint8_t correctness = 0;
 484:	80 e0       	ldi	r24, 0x00	; 0
		else 
			correctness = 1;
	}
	
	return correctness;
}
 486:	08 95       	ret

00000488 <servo_set_position>:
	
	pbr_pwm_set(brushless_num, procent);
}

void servo_set_position(int8_t servo_num, int8_t degrees)
{
 488:	cf 93       	push	r28
 48a:	df 93       	push	r29
	if(servo_num > NUM_OF_SERVOS || servo_num < 0)
 48c:	86 30       	cpi	r24, 0x06	; 6
 48e:	70 f4       	brcc	.+28     	; 0x4ac <servo_set_position+0x24>
		return;
	
	if(degrees > 180 || degrees < 0)
 490:	67 fd       	sbrc	r22, 7
 492:	0c c0       	rjmp	.+24     	; 0x4ac <servo_set_position+0x24>
 494:	d6 2f       	mov	r29, r22
 496:	c8 2f       	mov	r28, r24
		return;
	
	if(!servo_limit_check(servo_num, degrees))
 498:	0e 94 39 02 	call	0x472	; 0x472 <servo_limit_check>
 49c:	88 23       	and	r24, r24
 49e:	31 f0       	breq	.+12     	; 0x4ac <servo_set_position+0x24>
		return;
		
	servo_pwm_set(servo_num, degrees);
 4a0:	6d 2f       	mov	r22, r29
 4a2:	8c 2f       	mov	r24, r28
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
		return;
	
	if(!servo_limit_check(servo_num, degrees))
		return;
		
	servo_pwm_set(servo_num, degrees);
 4a8:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <servo_pwm_set>
}
 4ac:	df 91       	pop	r29
 4ae:	cf 91       	pop	r28
 4b0:	08 95       	ret

000004b2 <brushless_init>:
	return correctness;
}

void brushless_init(void)
{
	pbr_pwm_set(BR_HEAD, 100);
 4b2:	64 e6       	ldi	r22, 0x64	; 100
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pbr_pwm_set>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4ba:	24 e5       	ldi	r18, 0x54	; 84
 4bc:	35 e8       	ldi	r19, 0x85	; 133
 4be:	85 e4       	ldi	r24, 0x45	; 69
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	21 50       	subi	r18, 0x01	; 1
 4c4:	30 40       	sbci	r19, 0x00	; 0
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <brushless_init+0x10>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <brushless_init+0x1c>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <brushless_init+0x1e>
 4d0:	00 00       	nop
	_delay_ms(8000);
	pbr_pwm_set(BR_HEAD, 0);
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pbr_pwm_set>
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	37 ea       	ldi	r19, 0xA7	; 167
 4de:	81 e6       	ldi	r24, 0x61	; 97
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	30 40       	sbci	r19, 0x00	; 0
 4e4:	80 40       	sbci	r24, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <brushless_init+0x2e>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <brushless_init+0x38>
 4ea:	00 00       	nop
 4ec:	08 95       	ret

000004ee <register_16_write>:
#include <stdint.h>

#include "register.h"

void register_16_write(volatile uint16_t* adress, uint16_t value)
{
 4ee:	fc 01       	movw	r30, r24
	unsigned char sreg;
	
	sreg = SREG;
 4f0:	9f b7       	in	r25, 0x3f	; 63
	cli();
 4f2:	f8 94       	cli
	
	*adress = value;
 4f4:	71 83       	std	Z+1, r23	; 0x01
 4f6:	60 83       	st	Z, r22
	
//	sei(); //delete if unnecesary
	
	SREG = sreg;
 4f8:	9f bf       	out	0x3f, r25	; 63
 4fa:	08 95       	ret

000004fc <main>:

int main(void)
{
	unsigned char sens = 0;	
	
	USART0_init(57600);
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	71 ee       	ldi	r23, 0xE1	; 225
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 6b 00 	call	0xd6	; 0xd6 <USART0_init>
/*
	//sens3  - pg2
	DDRG |= (0 << PG2);
	PORTG = 0;
*/
	timer1_init();
 508:	0e 94 bd 01 	call	0x37a	; 0x37a <timer1_init>
	timer3_init();
 50c:	0e 94 de 01 	call	0x3bc	; 0x3bc <timer3_init>
	pwm_init();
 510:	0e 94 ff 01 	call	0x3fe	; 0x3fe <pwm_init>
	sensors_init();
 514:	0e 94 c3 00 	call	0x186	; 0x186 <sensors_init>
	
	brushless_set_speed(BR_HEAD, 0);	
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	0e 94 32 02 	call	0x464	; 0x464 <brushless_set_speed>
	brushless_set_speed(BR_SECONDARY, 0);
 520:	60 e0       	ldi	r22, 0x00	; 0
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	0e 94 32 02 	call	0x464	; 0x464 <brushless_set_speed>
	
	sei();
 528:	78 94       	sei
	
	servo_pwm_set(SERVO1, 180);
 52a:	64 eb       	ldi	r22, 0xB4	; 180
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	0e 94 76 01 	call	0x2ec	; 0x2ec <servo_pwm_set>
	servo_pwm_set(SERVO2, 180);
 532:	64 eb       	ldi	r22, 0xB4	; 180
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0e 94 76 01 	call	0x2ec	; 0x2ec <servo_pwm_set>
	servo_pwm_set(SERVO3, 180);
 53a:	64 eb       	ldi	r22, 0xB4	; 180
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	0e 94 76 01 	call	0x2ec	; 0x2ec <servo_pwm_set>
	//brushless_init();

	while(1)
	{
		update_sensor_status();
 542:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <update_sensor_status>
		read_packet();
 546:	0e 94 2c 01 	call	0x258	; 0x258 <read_packet>
		
		send_sensor_status();
 54a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <send_sensor_status>
	}	
 54e:	f9 cf       	rjmp	.-14     	; 0x542 <main+0x46>

00000550 <__udivmodsi4>:
 550:	a1 e2       	ldi	r26, 0x21	; 33
 552:	1a 2e       	mov	r1, r26
 554:	aa 1b       	sub	r26, r26
 556:	bb 1b       	sub	r27, r27
 558:	fd 01       	movw	r30, r26
 55a:	0d c0       	rjmp	.+26     	; 0x576 <__udivmodsi4_ep>

0000055c <__udivmodsi4_loop>:
 55c:	aa 1f       	adc	r26, r26
 55e:	bb 1f       	adc	r27, r27
 560:	ee 1f       	adc	r30, r30
 562:	ff 1f       	adc	r31, r31
 564:	a2 17       	cp	r26, r18
 566:	b3 07       	cpc	r27, r19
 568:	e4 07       	cpc	r30, r20
 56a:	f5 07       	cpc	r31, r21
 56c:	20 f0       	brcs	.+8      	; 0x576 <__udivmodsi4_ep>
 56e:	a2 1b       	sub	r26, r18
 570:	b3 0b       	sbc	r27, r19
 572:	e4 0b       	sbc	r30, r20
 574:	f5 0b       	sbc	r31, r21

00000576 <__udivmodsi4_ep>:
 576:	66 1f       	adc	r22, r22
 578:	77 1f       	adc	r23, r23
 57a:	88 1f       	adc	r24, r24
 57c:	99 1f       	adc	r25, r25
 57e:	1a 94       	dec	r1
 580:	69 f7       	brne	.-38     	; 0x55c <__udivmodsi4_loop>
 582:	60 95       	com	r22
 584:	70 95       	com	r23
 586:	80 95       	com	r24
 588:	90 95       	com	r25
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	bd 01       	movw	r22, r26
 590:	cf 01       	movw	r24, r30
 592:	08 95       	ret

00000594 <__umulhisi3>:
 594:	a2 9f       	mul	r26, r18
 596:	b0 01       	movw	r22, r0
 598:	b3 9f       	mul	r27, r19
 59a:	c0 01       	movw	r24, r0
 59c:	a3 9f       	mul	r26, r19
 59e:	70 0d       	add	r23, r0
 5a0:	81 1d       	adc	r24, r1
 5a2:	11 24       	eor	r1, r1
 5a4:	91 1d       	adc	r25, r1
 5a6:	b2 9f       	mul	r27, r18
 5a8:	70 0d       	add	r23, r0
 5aa:	81 1d       	adc	r24, r1
 5ac:	11 24       	eor	r1, r1
 5ae:	91 1d       	adc	r25, r1
 5b0:	08 95       	ret

000005b2 <_exit>:
 5b2:	f8 94       	cli

000005b4 <__stop_program>:
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <__stop_program>
