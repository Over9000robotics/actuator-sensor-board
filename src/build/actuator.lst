   1               		.file	"actuator.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               		.cfi_sections	.debug_frame
  11               	.global	brushless_set_speed
  13               	brushless_set_speed:
  14               	.LFB6:
  15               		.file 1 "actuator.c"
   1:actuator.c    **** /* 
   2:actuator.c    ****  * @todo Make angle limitation for every servo
   3:actuator.c    ****  */
   4:actuator.c    **** 
   5:actuator.c    **** #include <avr/io.h>
   6:actuator.c    **** #include <avr/interrupt.h>
   7:actuator.c    **** #include <util/delay.h>
   8:actuator.c    **** #include <stdint.h>
   9:actuator.c    **** 
  10:actuator.c    **** #include "pwm.h"
  11:actuator.c    **** #include "communicator.h"
  12:actuator.c    **** #include "actuator.h"
  13:actuator.c    **** 
  14:actuator.c    **** void brushless_set_speed(uint8_t brushless_num, uint8_t procent)
  15:actuator.c    **** {
  16               		.loc 1 15 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  16:actuator.c    **** 	
  17:actuator.c    **** 	if(brushless_num > 2 || brushless_num < 0)
  23               		.loc 1 17 0
  24 0000 8330      		cpi r24,lo8(3)
  25 0002 00F4      		brsh .L1
  18:actuator.c    **** 		return;
  19:actuator.c    **** 	
  20:actuator.c    **** 	if(procent > 100 || procent < 0)
  26               		.loc 1 20 0
  27 0004 6536      		cpi r22,lo8(101)
  28 0006 00F4      		brsh .L1
  21:actuator.c    **** 		return;
  22:actuator.c    **** 	
  23:actuator.c    **** 	pbr_pwm_set(brushless_num, procent);
  29               		.loc 1 23 0
  30 0008 0C94 0000 		jmp pbr_pwm_set
  31               	.LVL1:
  32               	.L1:
  33 000c 0895      		ret
  34               		.cfi_endproc
  35               	.LFE6:
  37               	.global	servo_set_position
  39               	servo_set_position:
  40               	.LFB7:
  24:actuator.c    **** }
  25:actuator.c    **** 
  26:actuator.c    **** void servo_set_position(int8_t servo_num, uint8_t degrees)
  27:actuator.c    **** {
  41               		.loc 1 27 0
  42               		.cfi_startproc
  43               	.LVL2:
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  28:actuator.c    **** 	if(servo_num > NUM_OF_SERVOS || servo_num < 0)
  48               		.loc 1 28 0
  49 000e 8630      		cpi r24,lo8(6)
  50 0010 00F4      		brsh .L4
  29:actuator.c    **** 		return;
  30:actuator.c    **** 	
  31:actuator.c    **** 	if(degrees > 180 || degrees < 0)
  51               		.loc 1 31 0
  52 0012 653B      		cpi r22,lo8(-75)
  53 0014 00F4      		brsh .L4
  32:actuator.c    **** 		return;
  33:actuator.c    **** 	
  34:actuator.c    **** 	//if(!servo_limit_check(servo_num, degrees))
  35:actuator.c    **** 	//	return;
  36:actuator.c    **** 		
  37:actuator.c    **** 	servo_pwm_set(servo_num, degrees);
  54               		.loc 1 37 0
  55 0016 0C94 0000 		jmp servo_pwm_set
  56               	.LVL3:
  57               	.L4:
  58 001a 0895      		ret
  59               		.cfi_endproc
  60               	.LFE7:
  62               	.global	servo_limit_check
  64               	servo_limit_check:
  65               	.LFB8:
  38:actuator.c    **** }
  39:actuator.c    **** 
  40:actuator.c    **** uint8_t servo_limit_check(int8_t servo_num, int8_t degrees)
  41:actuator.c    **** {
  66               		.loc 1 41 0
  67               		.cfi_startproc
  68               	.LVL4:
  69               	/* prologue: function */
  70               	/* frame size = 0 */
  71               	/* stack size = 0 */
  72               	.L__stack_usage = 0
  42:actuator.c    **** 	uint8_t correctness = 1;
  43:actuator.c    **** 	
  44:actuator.c    **** 	if(servo_num == SERVO1)
  73               		.loc 1 44 0
  74 001c 8150      		subi r24,lo8(-(-1))
  75               	.LVL5:
  76 001e 8430      		cpi r24,lo8(4)
  77 0020 00F4      		brsh .L8
  45:actuator.c    **** 	{
  46:actuator.c    **** 		if(degrees > SERVO1_MAX || degrees < SERVO1_MIN)
  78               		.loc 1 46 0
  79 0022 862F      		mov r24,r22
  80               	.LVL6:
  81 0024 8095      		com r24
  82 0026 881F      		rol r24
  83 0028 8827      		clr r24
  84 002a 881F      		rol r24
  85 002c 0895      		ret
  86               	.L8:
  47:actuator.c    **** 		{
  48:actuator.c    **** 			return 0;
  49:actuator.c    **** 		}
  50:actuator.c    **** //		else 
  51:actuator.c    **** //			correctness = 1;
  52:actuator.c    **** 	}
  53:actuator.c    **** 	
  54:actuator.c    **** 	else if(servo_num == SERVO2)
  55:actuator.c    **** 	{
  56:actuator.c    **** 		if(degrees > SERVO2_MAX || degrees < SERVO2_MIN)
  57:actuator.c    **** 		{
  58:actuator.c    **** 			return 0;
  59:actuator.c    **** 		}
  60:actuator.c    **** //		else 
  61:actuator.c    **** //			correctness = 1;
  62:actuator.c    **** 	}
  63:actuator.c    **** 	
  64:actuator.c    **** 	else if(servo_num == SERVO3)
  65:actuator.c    **** 	{
  66:actuator.c    **** 		if(degrees > SERVO3_MAX || degrees < SERVO3_MIN)
  67:actuator.c    **** 		{
  68:actuator.c    **** 			return 0;
  69:actuator.c    **** 		}
  70:actuator.c    **** //		else 
  71:actuator.c    **** //			correctness = 1;
  72:actuator.c    **** 	}
  73:actuator.c    **** 	
  74:actuator.c    **** 	else if(servo_num == SERVO4)
  75:actuator.c    **** 	{
  76:actuator.c    **** 		if(degrees > SERVO4_MAX || degrees < SERVO4_MIN)
  77:actuator.c    **** 		{
  78:actuator.c    **** 			return 0;
  79:actuator.c    **** 		}
  80:actuator.c    **** //		else 
  81:actuator.c    **** //			correctness = 1;
  82:actuator.c    **** 	}
  83:actuator.c    **** 	
  84:actuator.c    **** 	return correctness;
  87               		.loc 1 84 0
  88 002e 81E0      		ldi r24,lo8(1)
  85:actuator.c    **** }
  89               		.loc 1 85 0
  90 0030 0895      		ret
  91               		.cfi_endproc
  92               	.LFE8:
  94               	.global	brushless_init
  96               	brushless_init:
  97               	.LFB9:
  86:actuator.c    **** 
  87:actuator.c    **** void brushless_init(void)
  88:actuator.c    **** {
  98               		.loc 1 88 0
  99               		.cfi_startproc
 100               	/* prologue: function */
 101               	/* frame size = 0 */
 102               	/* stack size = 0 */
 103               	.L__stack_usage = 0
  89:actuator.c    **** 	pbr_pwm_set(BR_HEAD, 100);
 104               		.loc 1 89 0
 105 0032 64E6      		ldi r22,lo8(100)
 106 0034 81E0      		ldi r24,lo8(1)
 107 0036 0E94 0000 		call pbr_pwm_set
 108               	.LVL7:
 109               	.LBB6:
 110               	.LBB7:
 111               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/avr/include/util/delay.h **** #endif
  41:/usr/lib/avr/include/util/delay.h **** 
  42:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/avr/include/util/delay.h **** 
  46:/usr/lib/avr/include/util/delay.h **** /** \file */
  47:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/avr/include/util/delay.h ****     \code
  49:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/avr/include/util/delay.h ****     \endcode
  53:/usr/lib/avr/include/util/delay.h **** 
  54:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/avr/include/util/delay.h ****     used.
  58:/usr/lib/avr/include/util/delay.h **** 
  59:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/avr/include/util/delay.h **** 
  68:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/avr/include/util/delay.h **** 
  77:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/avr/include/util/delay.h **** 
  81:/usr/lib/avr/include/util/delay.h **** */
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/avr/include/util/delay.h **** #endif
  87:/usr/lib/avr/include/util/delay.h **** 
  88:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/avr/include/util/delay.h **** #endif
  93:/usr/lib/avr/include/util/delay.h **** 
  94:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/avr/include/util/delay.h **** #endif
  97:/usr/lib/avr/include/util/delay.h **** 
  98:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/avr/include/util/delay.h **** #endif
 103:/usr/lib/avr/include/util/delay.h **** 
 104:/usr/lib/avr/include/util/delay.h **** /**
 105:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/avr/include/util/delay.h **** 
 107:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/avr/include/util/delay.h **** 
 109:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/avr/include/util/delay.h **** 
 112:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/avr/include/util/delay.h **** 
 114:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/avr/include/util/delay.h **** 
 120:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/avr/include/util/delay.h **** 
 125:/usr/lib/avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/avr/include/util/delay.h **** 
 132:/usr/lib/avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/avr/include/util/delay.h **** 
 140:/usr/lib/avr/include/util/delay.h ****  */
 141:/usr/lib/avr/include/util/delay.h **** void
 142:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/avr/include/util/delay.h **** {
 144:/usr/lib/avr/include/util/delay.h **** 	double __tmp ; 
 145:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 148:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 149:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:/usr/lib/avr/include/util/delay.h **** 
 155:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:/usr/lib/avr/include/util/delay.h **** 
 158:/usr/lib/avr/include/util/delay.h **** 	#else
 159:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 160:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:/usr/lib/avr/include/util/delay.h **** 	#endif
 162:/usr/lib/avr/include/util/delay.h **** 
 163:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 112               		.loc 2 163 0
 113 003a 24E5      		ldi r18,lo8(21333332)
 114 003c 35E8      		ldi r19,hi8(21333332)
 115 003e 85E4      		ldi r24,hlo8(21333332)
 116 0040 91E0      		ldi r25,hhi8(21333332)
 117 0042 2150      	1:	subi r18,1
 118 0044 3040      		sbci r19,0
 119 0046 8040      		sbci r24,0
 120 0048 9040      		sbci r25,0
 121 004a 01F4      		brne 1b
 122 004c 00C0      		rjmp .
 123 004e 00C0      		rjmp .
 124 0050 0000      		nop
 125               	.LBE7:
 126               	.LBE6:
  90:actuator.c    **** 	_delay_ms(8000);
  91:actuator.c    **** 	pbr_pwm_set(BR_HEAD, 0);
 127               		.loc 1 91 0
 128 0052 60E0      		ldi r22,0
 129 0054 81E0      		ldi r24,lo8(1)
 130 0056 0E94 0000 		call pbr_pwm_set
 131               	.LVL8:
 132               	.LBB8:
 133               	.LBB9:
 134               		.loc 2 163 0
 135 005a 2FEF      		ldi r18,lo8(6399999)
 136 005c 37EA      		ldi r19,hi8(6399999)
 137 005e 81E6      		ldi r24,hlo8(6399999)
 138 0060 2150      	1:	subi r18,1
 139 0062 3040      		sbci r19,0
 140 0064 8040      		sbci r24,0
 141 0066 01F4      		brne 1b
 142 0068 00C0      		rjmp .
 143 006a 0000      		nop
 144 006c 0895      		ret
 145               	.LBE9:
 146               	.LBE8:
 147               		.cfi_endproc
 148               	.LFE9:
 150               	.Letext0:
 151               		.file 3 "/usr/lib/avr/include/stdint.h"
 152               		.file 4 "pwm.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 actuator.c
     /tmp/cclZNUl9.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cclZNUl9.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cclZNUl9.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cclZNUl9.s:5      *ABS*:000000000000003b __RAMPZ__
     /tmp/cclZNUl9.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cclZNUl9.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cclZNUl9.s:13     .text:0000000000000000 brushless_set_speed
     /tmp/cclZNUl9.s:39     .text:000000000000000e servo_set_position
     /tmp/cclZNUl9.s:64     .text:000000000000001c servo_limit_check
     /tmp/cclZNUl9.s:96     .text:0000000000000032 brushless_init

UNDEFINED SYMBOLS
pbr_pwm_set
servo_pwm_set
